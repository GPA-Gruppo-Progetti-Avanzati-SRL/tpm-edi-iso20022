// Package {{.PackageName}}
// Do not Edit. This stuff it's been automatically generated.
package {{.PackageName}}

import (
	"fmt"
	"github.com/rs/zerolog/log"
	"strings"
)


{{ $tree := simpleVisit .PackageName }}
const (
{{- range $tree.Paths}}
  {{- $lastNode := .LastItem }}
  {{- if ne $lastNode.Name "_self" }}
  {{- if $lastNode.IsArray }}
      Path_{{ .Identifier }}_Item = "{{.Value}}"
      Path_{{ .Identifier }} = "{{ trimSuffix .Value "[]" }}" // ARRAY
  {{- else }}
      Path_{{ .Identifier }} = "{{.Value}}"
  {{- end }}
  {{- end }}
{{- end }}
)

const (
	PathTypeProperty = "property"
	PathTypeStruct = "struct"
	PathTypeArray = "array"
	PathTypeArrayItem = "array-item"
)

var nodeRegistryTypes = map[string]string{
{{- range $tree.Paths}}
  {{- $lastNode := .LastItem }}
  {{- if ne $lastNode.Name "_self" }}
  {{- if $lastNode.IsArray }}
      Path_{{ .Identifier }}_Item : PathTypeArrayItem,
      Path_{{ .Identifier }} : PathTypeArray,
  {{- else }}
    {{- if $lastNode.IsStruct }}
      Path_{{ .Identifier }} : PathTypeStruct,
     {{- else }}
      Path_{{ .Identifier }} : PathTypeProperty,
     {{- end }}
  {{- end }}
  {{- end }}
{{- end }}
}

func PathType(p string) (string, error) {
	t, ok := nodeRegistryTypes[p]
	if !ok {
		return "", fmt.Errorf("the path %s cannot be recognized as a valid path in {{.PackageName}}", p)
	}

	return t, nil
}

func MustSetArrayItemPathModifiers(p string, modifiers []string) string {
	var err error
	p, err = SetArrayItemPathModifiers(p, modifiers)
	if err != nil {
		log.Fatal().Err(err).Send()
	}

	return p
}

func SetArrayItemPathModifiers(p string, modifiers []string) (string, error) {
	numArrSpecifiers := strings.Count(p, "[]")
	if len(modifiers) != numArrSpecifiers {
		err := fmt.Errorf("the number of provided (%d) modifiers doesn't match the path provided", len(modifiers))
		return p, err
	}

	for _, m := range modifiers {
		if m == "" {
			m = "last"
		}
		p = strings.Replace(p, "[]", fmt.Sprintf("[%s]", m), 1)
	}

	return p, nil
}

