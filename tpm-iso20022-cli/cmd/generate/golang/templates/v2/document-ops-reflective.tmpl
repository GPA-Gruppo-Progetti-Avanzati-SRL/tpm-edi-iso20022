// Package {{.PackageName}}
// Do not Edit. This stuff it's been automatically generated.
package {{.PackageName}}

import (
    {{- range getComplexTypesImports .PackageName}}
    "{{ . }}"
    {{- end}}
	"errors"
	"reflect"
	"fmt"
	"github.com/GPA-Gruppo-Progetti-Avanzati-SRL/tpm-common/util/dotnotation"
	"github.com/rs/zerolog/log"
	"strings"
)

{{ $packageName := .PackageName }}

type SetOpOptions struct {
	logVerbose bool
	skipIfEmpty bool
}

type SetOpOption func(opts *SetOpOptions)

func SetOpWithLog(b bool) SetOpOption {
	return func(opts *SetOpOptions) {
		opts.logVerbose = b
	}
}

func SetOpWithSkipIfEmpty(b bool) SetOpOption {
	return func(opts *SetOpOptions) {
		opts.skipIfEmpty = b
	}
}

type GetOpOptions struct {
	logVerbose bool
}

type GetOpOption func(opts *GetOpOptions)

func GetOpWithLog(b bool) GetOpOption {
	return func(opts *GetOpOptions) {
		opts.logVerbose = b
	}
}

// Set
// Deprecated: simply calls the SetProperty method
func (d *Document) Set(path string, src interface{}, opts ...SetOpOption) error {
	return d.SetProperty(path, src, opts...)
}

func (d *Document) SetProperty(path string, src interface{}, opts ...SetOpOption) error {

	const semLogContext = "camt_053_001_02::set-property"

	options := SetOpOptions{}
	for _, o := range opts {
		o(&options)
	}

	if options.skipIfEmpty && isEmpty(src) {
		return nil
	}

	v := reflect.ValueOf(d)

	p, err := dotnotation.NewPath(string(path))
	if err != nil {
	    if options.logVerbose {
    		log.Error().Err(err).Interface("path", path).Interface("value", src).Msg(semLogContext)
    	}

		return err
	}
	paths := []dotnotation.DotPath{p}

	fields := d.mapper.TraversalsByName(v.Type(), paths)

	values := make([]interface{}, 1)
	err = fieldsByTraversal(v, fields, paths, values, true, false)
	if err != nil {
		if options.logVerbose {
			log.Error().Err(err).Interface("path", path).Interface("value", src).Msg(semLogContext)
		}
		return err
	}

	return copy2Dest(path, values[0], src, &options)
}

func isEmpty(i interface{}) bool {
	b := false

	var s string
	switch ti := i.(type) {
	case fmt.Stringer:
		s = ti.String()
		b = strings.TrimSpace(s) == ""
	case string:
		s = ti
		b = strings.TrimSpace(s) == ""

	}

	return b
}

// Get
// Deprecated: the simply calls the GetProperty method
func (d *Document) Get(path string, opts ...GetOpOption) (interface{}, error) {
	return d.GetProperty(path, opts...)
}

func (d *Document) GetProperty(path string, opts ...GetOpOption) (interface{}, error) {

	const semLogContext = "{{ $packageName }}::get-property"

	options := GetOpOptions{}
	for _, o := range opts {
		o(&options)
	}

	v := reflect.ValueOf(d)

	p, err := dotnotation.NewPath(string(path))
   	if err != nil {
   		if options.logVerbose {
    		log.Error().Err(err).Str("path", string(path)).Msg(semLogContext)
    	}
   		return nil, err
   	}
   	paths := []dotnotation.DotPath{p}

	fields := d.mapper.TraversalsByName(v.Type(), paths)

	values := make([]interface{}, 1)
	err = fieldsByTraversal(v, fields, paths, values, true, true)
	if err != nil {
   		if options.logVerbose {
    		log.Error().Err(err).Str("path", string(path)).Msg(semLogContext)
    	}
		return nil, err
	}

	/*
		rv := reflect.ValueOf(values[0])
		fmt.Println("Indirect type is:", reflect.Indirect(rv), reflect.Indirect(rv).Type(), rv.Kind(), rv.Elem(), rv.Elem().Type()) // prints main.CustomStruct

		if tv, ok := values[0].(*common.Max35Text); ok {
			return *tv, nil
		}
	*/

	return derefProperty(path, values[0])
}

{{ $types := typesVisit .PackageName }}
func copy2Dest(docPath string, dest, src interface{}, options *SetOpOptions) error {

	const semLogContext = "{{ $packageName }}::copy-to-dest"

	var err error
	switch typedDest := dest.(type) {
{{- range $nm, $tp := $types.Types}}
{{- if not $tp.IsStruct }}
  case *{{$tp.TypeWithPackageTrimmed $packageName}}:
        if typedDest == nil {
        	err = errors.New("nil pointer... in unmarshalling {{$tp.TypeWithPackageTrimmed $packageName}} data for" + string(docPath))
        	if err != nil && options.logVerbose {
        		log.Error().Err(err).Str("path", string(docPath)).Interface("value", src).Msg(semLogContext)
        	}
        	return err
	    }

  		*typedDest, err = {{$tp.NameOfTypeFunction "To" $packageName }}(src)
  		if err != nil && options.logVerbose {
        	log.Error().Err(err).Str("path", string(docPath)).Interface("value", src).Msg(semLogContext)
        }
  		return err
{{- end }}
{{- end }}
   default:
        err = fmt.Errorf("could not find the type to node %s of type %T", docPath, dest)
        if options.logVerbose {
        	log.Error().Err(err).Str("path", string(docPath)).Interface("value", src).Msg(semLogContext)
        }
        return err
 }

}

func derefProperty(docPath string, val interface{}) (interface{}, error) {

    if val == nil {
       return nil, nil
    }

    var err error
	switch tv := val.(type) {
{{- range $nm, $tp := $types.Types}}
{{- if not $tp.IsStruct }}
  case *{{$tp.TypeWithPackageTrimmed $packageName}}:
        return *tv, nil
{{- end }}
{{- end }}
   default:
        err = fmt.Errorf("could not find the type to node %s of type %T", string(docPath), val)
 }

 return val, err
}

